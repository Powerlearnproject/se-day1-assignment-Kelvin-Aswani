1: Introduction to Software Engineering

Explain what software engineering is and discuss its importance in the technology industry.
Software engineering is the application of engineering principles to the design, development, testing, deployment, and maintenance of software systems. It ensures that software is built systematically, efficiently, and meets user requirements.
Importance in the Technology Industry

Ensures the development of reliable and scalable software.

Enhances collaboration in large-scale projects.

Reduces software development costs through efficient processes.

Enables the creation of innovative and high-performance applications

Identify and describe at least three key milestones in the evolution of software engineering.


List and briefly explain the phases of the Software Development Life Cycle.

Key Milestones in Software Engineering Evolution

1950s - Birth of Programming Languages: Introduction of early languages like Fortran and assembly language.

1970s - Structured Programming: Adoption of structured programming principles to improve readability and maintainability.

2000s - Agile Development: Shift towards iterative, user-focused methodologies like Agile and DevOps.

Phases of the Software Development Life Cycle (SDLC)

Requirement Analysis - Gathering and defining user needs.

Design - Architectural planning of the system.

Implementation (Coding) - Writing and compiling the code.

Testing - Ensuring functionality and identifying defects.

Deployment - Releasing the software to users.

Maintenance - Updating and fixing issues post-release.
Compare and contrast the Waterfall and Agile methodologies. Provide examples of scenarios where each would be appropriate.
Waterfall methodology follows a sequential process, making it rigid and documentation-heavy, with minimal user involvement. It is best suited for large, well-defined projects such as medical software. Agile methodology, in contrast, is iterative, highly flexible, and encourages continuous user involvement. It is ideal for dynamic and fast-changing projects like user-centric mobile applications.

Describe the roles and responsibilities of a Software Developer, a Quality Assurance Engineer, and a Project Manager in a software engineering team.

Software developers write, test, and maintain code. Quality assurance (QA) engineers conduct testing to ensure software reliability. Project managers oversee project timelines, budget, and team coordination
Discuss the importance of Integrated Development Environments (IDEs) and Version Control Systems (VCS) in the software development process. Give examples of each.
IDEs such as Visual Studio Code and IntelliJ IDEA enhance coding efficiency with debugging, syntax highlighting, and autocompletion. Version Control Systems (VCS) like Git and SVN enable version tracking, collaboration, and rollback of changes.

What are some common challenges faced by software engineers? Provide strategies to overcome these challenges.
Software engineers face challenges such as debugging complex code, which can be addressed using systematic debugging and logging techniques. Tight deadlines require time management and Agile practices. Keeping up with technology necessitates continuous learning through online courses and documentation.

Explain the different types of testing (unit, integration, system, and acceptance) and their importance in software quality assurance.
Unit testing checks individual components, integration testing ensures module interaction, system testing validates the complete system, and acceptance testing confirms software meets user needs.

#Part 2: Introduction to AI and Prompt Engineering
Prompt engineering involves crafting precise inputs (prompts) to optimize AI model responses. It ensures AI delivers relevant and accurate answers

Define prompt engineering and discuss its importance in interacting with AI models.
Prompt engineering enhances AI efficiency and accuracy, reduces misunderstandings, and allows customization of AI interactions for various applications.

Provide an example of a vague prompt and then improve it by making it clear, specific, and concise. Explain why the improved prompt is more effective.A vague prompt such as "Tell me about medicine" lacks specificity. An improved version, "Explain the role of the hippocampus in memory formation and how it relates to Alzheimerâ€™s disease," is more effective because it is specific, clearly states the topic and expected connection, and avoids unnecessary vagueness, improving AI response quality.
